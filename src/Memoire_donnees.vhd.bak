library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity Memoire_donnees is port(
    CLK     : IN  std_logic;  -- Horloge 
    Reset	: IN  std_logic; -- reset asynchrone (actif à l’état haut)
    DataIn  : IN  std_logic_vector(31 downto 0); -- bus 32 bits en écriture
	Addr	: IN  std_logic_vector(5 downto 0); -- Bus d’adresses en lecture et écriture sur 6 bits
	WrEn    : IN std_logic; -- Write Enable sur 1 bit
	DataOut : OUT std_logic_vector(31 downto 0)); -- Bus de données en lecture sur 32 bits
	
END entity Memoire_donnees;


ARCHITECTURE RTL OF Memoire_donnees IS

--Declaration Type Tableau Memoire
type table is array(63 downto 0) of std_logic_vector(31 downto 0);
--Fonction d'Initialisation du Banc de Registres
function init_banc return table is 
variable result : table;
begin
for i in 63 downto 0 loop
	result(i) := (others=>'0');
end loop;
	result(63):=X"00000030";
	return result;
	end init_banc;
--Déclaration et Initialisation du Banc de Registres 16x32 bits
signal Banc: table:= init_banc;

BEGIN

DataOut <= Banc(To_integer(Unsigned(Addr)));

process(Reset,CLK)
begin
	
	if Reset = '1' then
	
		DataOut <= (others => '0');
		Banc <= init_banc;
		
	elsif rising_edge(CLK) then
		if WE = '1' then 
			Banc(To_integer(Unsigned(Addr))) <= DataIn;
		
			
		
		end if;
	end if;
end process;

END ARCHITECTURE;